# This project uses data about the Spotify Top 50 songs which was downloaded from Kaggle.
# To start, I created a table to hold the data.  

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

# After creating the table, I inserted the Spotify .csv file containing the data into it. 

# Then, I analyzed the data using SQL to answer the following questions:


#1 Which artist has the highest average popularity score and what is their average popularity score?

SELECT artist_name, AVG(popularity) AS avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_popularity desc
LIMIT 1;

#2 What song has the highest popularity score and what is the popularity score?

SELECT track_name, popularity
FROM BIT_DB.Spotifydata
WHERE popularity IN (SELECT max(popularity) FROM BIT_DB.Spotifydata);

#3 Which artist(s) has the most songs featured in the Spotify Top 50?

SELECT artist_name, COUNT(artist_name) AS "Number of Songs"
FROM Spotifydata  
GROUP BY artist_name
HAVING COUNT(artist_name)=(SELECT MAX(name_count) 
                            FROM (SELECT artist_name, COUNT(artist_name) AS name_count
                                  FROM Spotifydata 
                                  GROUP BY artist_name));

#4 Select the track names of all the songs by the artist "Bad Bunny".

SELECT track_name
FROM BIT_DB.Spotifydata
WHERE artist_name = "Bad Bunny";

#5 What artist released the shortest track? 

SELECT artist_name, track_name, min(duration_ms)
FROM BIT_DB.Spotifydata;

#6 Select all the artists that had an average popularity score greater than 90 per song. 

SELECT artist_name, avg(popularity) AS avg_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING avg_popularity >90
ORDER BY avg_popularity desc;

#7 Select all tracks that have a danceability score greater than 0.7, speechiness greater than 0.05, and tempo greater than 100.

SELECT track_name, danceability, speechiness, tempo
FROM BIT_DB.Spotifydata
WHERE danceability >0.7
AND speechiness >0.05
AND tempo >100;

#8 What is the average liveness score for the 10 most popular songs? 

WITH mostpopular AS (SELECT popularity, liveness
                     FROM Spotifydata
                     ORDER BY popularity desc
                     LIMIT 10)
              
SELECT avg(liveness) FROM mostpopular;
